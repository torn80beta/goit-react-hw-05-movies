{"version":3,"file":"static/js/736.eac41596.chunk.js","mappings":"mTACMA,EAAU,mCAEVC,EAAMC,EAAAA,EAAAA,OAAa,CACvBC,QAAS,iCAIEC,EAAiB,mCAAG,6GAIvBH,EAAII,IAAJ,uCAAwCL,IAAWM,MAAK,SAAAC,GAE5DC,EAAOD,EAASC,KAAKC,OACtB,IAP4B,gCAStBD,GATsB,gCAW7BE,QAAQC,IAAR,MAX6B,wDAAH,qDAejBC,EAAY,mCAAG,WAAMC,GAAN,gGAGlBZ,EACHI,IADG,iBAEQQ,EAFR,oBAEsBb,EAFtB,8CAIHM,MAAK,SAAAC,GACJC,EAAOD,CACR,IATqB,gCAWjBC,EAAKA,MAXY,gCAaxBE,QAAQC,IAAR,MAbwB,wDAAH,sDAiBZG,EAAY,mCAAG,WAAMD,GAAN,gGAGlBZ,EACHI,IADG,iBACWQ,EADX,4BACiCb,EADjC,oBAEHM,MAAK,SAAAC,GAAQ,OAAKC,EAAOD,EAASC,KAAKO,IAA1B,IALQ,gCAOjBP,GAPiB,gCASxBE,QAAQC,IAAR,MATwB,wDAAH,sDAaZK,EAAe,mCAAG,WAAMH,GAAN,gGAGrBZ,EACHI,IADG,iBACWQ,EADX,4BACiCb,EADjC,2BAEHM,MAAK,SAAAC,GACJC,EAAOD,EAASC,KAAKC,OACtB,IAPwB,gCAQpBD,GARoB,gCAW3BE,QAAQC,IAAR,MAX2B,wDAAH,sDAefM,EAAW,mCAAG,WAAMC,GAAN,gGAGjBjB,EACHI,IADG,gCAC0BL,EAD1B,YACqCkB,IACxCZ,MAAK,SAAAC,GAAQ,OAAKC,EAAOD,EAASC,KAAKC,OAA1B,IALO,gCAOhBD,GAPgB,gCASvBE,QAAQC,IAAR,MATuB,wDAAH,qD,wKClEXQ,EAAoBC,EAAAA,EAAAA,QAAH,kEAKjBC,EAAeD,EAAAA,EAAAA,GAAH,wGAOZE,EAAgBF,EAAAA,EAAAA,GAAH,kJASbG,EAA2BH,EAAAA,EAAAA,EAAH,qE,SCoCrC,EAjDa,WACX,IACMI,GADWC,EAAAA,EAAAA,MACQC,MAAMC,QAC/B,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOb,EAAP,KAAac,EAAb,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACR,IACE,IAAMC,EAAO,mCAAG,uGACOjB,EAAAA,EAAAA,IAAaU,GADpB,OACRQ,EADQ,OAERC,EAAiBD,EAAOE,QAAO,SAAAC,GAAK,OAAIA,EAAMC,YAAV,IAC1CP,EAAQI,EAAeI,MAAM,EAAG,KAHlB,2CAAH,qDAKbN,GAGD,CAFC,MAAOO,GACP5B,QAAQC,IAAI2B,EACb,CACF,GAAE,CAACd,KAKF,SAACL,EAAD,WAEKJ,EAAKwB,SACN,SAAChB,EAAD,0FAKA,SAACF,EAAD,UACGN,EAAKyB,KAAI,SAAAC,GAAM,OACd,SAACnB,EAAD,UACGmB,EAAOL,eACN,4BACE,gBACEM,IAAG,yCAAoCD,EAAOL,cAC9CO,IAAG,UAAKF,EAAOG,SAEjB,uBAAIH,EAAOG,WAPGH,EAAO5B,GADb,OAiBzB,C","sources":["api/api.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '2312830e6f848d2a7194ede59058ec48';\n\nconst api = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  //   timeout: 1000,\n});\n\nexport const getTrendingMovies = async () => {\n  let data;\n  try {\n    //   const trendingMovies = await api\n    await api.get(`/trending/movie/week?api_key=${API_KEY}`).then(response => {\n      // console.log(response.data.results);\n      data = response.data.results;\n    });\n    // console.log(data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieByID = async id => {\n  let data;\n  try {\n    await api\n      .get(\n        `/movie/${id}?api_key=${API_KEY}&language=en-US&append_to_response=videos`\n      )\n      .then(response => {\n        data = response;\n      });\n    // console.log(data.data);\n    return data.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieCast = async id => {\n  let data;\n  try {\n    await api\n      .get(`/movie/${id}/credits?api_key=${API_KEY}&language=en-US`)\n      .then(response => (data = response.data.cast));\n    // console.log(data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieReviews = async id => {\n  let data;\n  try {\n    await api\n      .get(`/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`)\n      .then(response => {\n        data = response.data.results;\n      });\n    return data;\n    // console.log(data);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const searchMovie = async query => {\n  let data;\n  try {\n    await api\n      .get(`/search/movie?api_key=${API_KEY}&${query}`)\n      .then(response => (data = response.data.results));\n    // console.log(data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const StyledCastSection = styled.section`\n  display: flex;\n  margin: 20px 0 20px;\n`;\n\nexport const StyledCastUl = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n`;\n\nexport const StyledActorLi = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  width: 150px;\n  gap: 5px;\n`;\n\nexport const StyledNoCastNotification = styled.p`\n  text-align: center;\n  margin: 40px auto;\n`;\n","import { getMovieCast } from 'api/api';\nimport { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport {\n  StyledCastSection,\n  StyledActorLi,\n  StyledCastUl,\n  StyledNoCastNotification,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const location = useLocation();\n  const movieId = location.state.movieid;\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    try {\n      const getCast = async () => {\n        const actors = await getMovieCast(movieId);\n        const normalizedCast = actors.filter(actor => actor.profile_path);\n        setCast(normalizedCast.slice(0, 14));\n      };\n      getCast();\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieId]);\n\n  //   console.log(location.state.movieid);\n  return (\n    // console.log(cast),\n    <StyledCastSection>\n      {/* <h2>Cast:</h2> */}\n      {(!cast.length && (\n        <StyledNoCastNotification>\n          We are sorry, but we don't have any information about this movie's\n          actors\n        </StyledNoCastNotification>\n      )) || (\n        <StyledCastUl>\n          {cast.map(person => (\n            <StyledActorLi key={person.id}>\n              {person.profile_path && (\n                <div>\n                  <img\n                    src={`https://image.tmdb.org/t/p/w200${person.profile_path}`}\n                    alt={`${person.name}`}\n                  />\n                  <p>{person.name}</p>\n                </div>\n              )}\n            </StyledActorLi>\n          ))}\n        </StyledCastUl>\n      )}\n    </StyledCastSection>\n  );\n};\n\nexport default Cast;\n"],"names":["API_KEY","api","axios","baseURL","getTrendingMovies","get","then","response","data","results","console","log","getMovieByID","id","getMovieCast","cast","getMovieReviews","searchMovie","query","StyledCastSection","styled","StyledCastUl","StyledActorLi","StyledNoCastNotification","movieId","useLocation","state","movieid","useState","setCast","useEffect","getCast","actors","normalizedCast","filter","actor","profile_path","slice","error","length","map","person","src","alt","name"],"sourceRoot":""}